#! /bin/sh

##############################################################################
## This script is a post-receive hook for maintaining Git-based service     ##
## deployments                                                              ##
##############################################################################

warnings=0
errors=0
me='deploy'
here="$(pwd)"
repo="$(cd $(git rev-parse --git-dir) && pwd)"
unset GIT_DIR

notice() {
	printf "%s: NOTICE: %s\n" "$me" "$*" >&2
}

err() {
	printf "%s: ERROR: %s\n" "$me" "$*" >&2
	errors=1
}

warn() {
	printf "%s: WARNING: %s\n" "$me" "$*" >&2
	warnings=1
}

# deploy_cutover repo-path deploy-path branch-name
deploy_cutover() {
	rev=$(git rev-parse "$3") || return 1
	name=$(echo $rev | cut -c1-7)
	prefix=$(GIT_DIR="$repo" git config --get deploy.$3.prefix)
	suffix=$(GIT_DIR="$repo" git config --get deploy.$3.suffix)
	target="$prefix$name$suffix"
	[ -d "$2" ] || mkdir -p "$2" || return 5
	curlinkname="current"
	prevlinkname="prev"
	current="$(cd $2 && readlink $curlinkname 2>/dev/null)"
	fresh=no
	if [ "$current" != "" ] && ! [ -d "$2/$current" ] ; then
		warn "current deployment of branch $3 ($current) is missing"
		warnings=1
		rm -f "$2/$curlinkname"
		current=""
	fi
	if ! [ -d "$2/$target" ] ; then
		fresh=yes
		notice "checking out commit $rev (for branch $3) to $target"
		cd "$2" && \
			git clone --recurse-submodules -b "$3" -- "$1" "$target" || return 10
		cd "$target" && \
			git config --add --type=bool advice.detachedHead false && \
			git checkout -q "$rev" || return 10
		cd .. && rm -f "$curlinkname" && ln -s "$target" "$curlinkname" || return 10
		notice "'$curlinkname' deployment is now $target"
	fi
	if [ "$current" != "" ] && [ "$current" != "$target" ] ; then
		# if there's a "prev" link, remove the (old) tree it points to before
		# creating a new link pointing at the tree that was current before
		# we did anything
		prev=$(readlink "$prevlinkname" 2>/dev/null)
		if ! [ -z "$prev" ] && [ "$prev" != "$current" ] && [ "$prev" != "$target" ] && [ -d "$prev" ] ; then
			notice "removing old deployment $prev..."
			rm -rf "$prev" || warnings=1
		fi
		notice "'$prevlinkname' deployment is now $current"
		rm -f "$prevlinkname" && ln -s "$current" "$prevlinkname" || warnings=1
	fi
	if [ "$fresh" = no ] ; then
		# if we didn't check out a new tree, then there's nothing further
		# to do
		notice "no fresh commits, nothing further to do"
		return 0
	fi
	newhooks=""
	oldhooks=""
	if [ -d "$target/.deploy" ] ; then
		newhooks="$2/$target/.deploy"
	fi
	if [ "$current" != "" ] && [ -d "$current/.deploy" ] ; then
		oldhooks="$2/$current/.deploy"
	fi
	notice "restarting services using hooks from $newhooks"
	notice "(previous deployment hooks in $oldhooks)"
	if ! [ -z "$current" ] && [ -x "$newhooks/prepare" ] ; then
		notice "invoking prepare hook for branch $3"
		cd "$2/$target" && "$newhooks/prepare" "$current" || return 10
	fi
	if ! [ -z "$current" ] && [ -x "$newhooks/upgrade" ] ; then
		notice "invoking upgrade hook for branch $3"
		cd "$2/$target" && "$newhooks/upgrade" "$current" || return 10
		return 0
	fi
	if ! [ -z "$current" ] && [ -x "$oldhooks/stop" ] ; then
		notice "stopping previous instance $current"
		cd "$2/$current" && "$oldhooks/stop" || warnings=1
	fi
	if [ -x "$newhooks/start" ] ; then
		notice "starting instance $target"
		cd "$2/$target" && "$newhooks/start" || return 10
	fi
	return 0
}

# iterate all configured deployment branches, passing the key details to
# the deploy_xxx function relevant to that branch's deployment mode

notice "repository is $repo"

branches=$(GIT_DIR="$repo" git config --list --name-only | grep -e "^deploy\." | cut -f2 -d. | uniq)
for branch in $branches ; do
	cd "$here" || exit
	root=$(GIT_DIR="$repo" git config --get deploy.${branch}.root)
	mode=$(GIT_DIR="$repo" git config --get deploy.${branch}.mode)
	if [ -z "$root" ] ; then
		err "branch $branch is specified in configuration but does not have a root path"
		continue
	fi
	if [ -z "$mode" ] ; then
		mode=cutover
		warn "no mode specified for branch $branch, defaulting to $mode"
	fi
	status=0
	case $mode in
		cutover)
			deploy_cutover "$repo" "$root" "$branch"
			status=$?
			;;
		*)
			err "mode $mode specified for branch $branch is not supported"
			continue
			;;
	esac
	if [ $status -ge 10 ] ; then
		errors=1
	elif [ $status -ge 1 ] ; then
		warnings=1
	fi
done

if [ $errors -gt 0 ] ; then
	notice "errors occurred during deployment"
	exit 10
fi

if [ $warnings -gt 0 ] ; then
	notice "warnings occurred during deployment"
	exit 1
fi

exit 0

